/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess.ui;

import chess.Main;
import chess.gameplay.GameController;
import chess.gameplay.MatchWrapper;
import chess.gameplay.world.Board;
import chess.ui.utils.BoardTile;
import chess.ui.utils.BoardTileSynchronizer;
import java.awt.event.ActionListener;

/**
 * Panel used for adding the board's tiles.
 * @author Gabriel
 */
public class BoardPanel extends javax.swing.JPanel {

    private BoardTile[][] boardTiles = new BoardTile[Board.SIDE_SIZE][Board.SIDE_SIZE];
    private BoardTileSynchronizer synchronizer;
    
    public final GameWindow gameWindow;
    
    private String player1Name;
    private String player2Name;
    
    /**
     * Creates new form BoardPanel
     */
    public BoardPanel(GameWindow gameWindow, String player1Name, String player2Name) {
        this.gameWindow = gameWindow;
        this.player1Name = player1Name;
        this.player2Name = player2Name;
        
        initComponents();
        
        fillBoardTiles();
        startGame();
    }
    
    private void fillBoardTiles() {
        for (int column = 0; column < Board.SIDE_SIZE; column++) {
            for (int row = 0; row < Board.SIDE_SIZE; row++) {
                BoardTile tile = new BoardTile(column, row);
                
                boardTiles[column][row] = tile;
                
                add(tile);
            }
        }
    }
    
    /**
     * Starts the game by letting the matchWrapper know the presentation layer
     * is ready to start.
     */
    public void startGame() {
        MatchWrapper matchWrapper = Main.getMatchWrapper();
        
        synchronizer = new BoardTileSynchronizer(boardTiles);
        SwingGameController gameController = new SwingGameController(this, synchronizer);
        addClickListenersToBoardTilesForGameController(gameController);
        
        matchWrapper.startNewMatch(gameController, player1Name, player2Name);
    }

    /**
     * Adds a listener to each board tile, in order to listen to clicks on
     * any board tile.
     * @param gameController Instance of the SwingGameController being used.
     */
    private void addClickListenersToBoardTilesForGameController(SwingGameController gameController) {
        ActionListener clickListener = (evt) -> {
            gameController.onBoardTileClicked((BoardTile)evt.getSource());
        };
        
        for (int column = 0; column < Board.SIDE_SIZE; column++) {
            for (int row = 0; row < Board.SIDE_SIZE; row++) {
                boardTiles[column][row].addActionListener(clickListener);
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(640, 480));
        setMinimumSize(new java.awt.Dimension(640, 480));
        setLayout(new java.awt.GridLayout(Board.SIDE_SIZE, Board.SIDE_SIZE));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
